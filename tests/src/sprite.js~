(function() {
  var Sprite, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = Object.prototype.hasOwnProperty;

  Sprite = Sprite = (function() {

    function Sprite(args) {
      var _ref, _ref10, _ref11, _ref12, _ref13, _ref14, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if (args == null) args = {};
      this.addChild = __bind(this.addChild, this);
      this.runDrawing2 = __bind(this.runDrawing2, this);
      this.runDrawing = __bind(this.runDrawing, this);
      this.draw = __bind(this.draw, this);
      this.x = (_ref = args.x) != null ? _ref : 0;
      this.y = (_ref2 = args.y) != null ? _ref2 : 0;
      this.angularVelocity = (_ref3 = args.angularVelocity) != null ? _ref3 : 0;
      this.velocity = (_ref4 = args.velocity) != null ? _ref4 : 0.5;
      this.otherVelocity = (_ref5 = args.otherVelocity) != null ? _ref5 : 0.3;
      this.alpha = (_ref6 = args.alpha) != null ? _ref6 : 1.0;
      this.rotation = (_ref7 = args.rotation) != null ? _ref7 : 0;
      this.verticalScale = 1;
      this.horizontalScale = 1;
      this.horizontalSkew = 0;
      this.verticalSkew = 0;
      this.width = (_ref8 = args.width) != null ? _ref8 : 0;
      this.subSprites = [];
      this.lineCap = (_ref9 = args.lineCap) != null ? _ref9 : "butt";
      this.lineWidth = (_ref10 = args.lineWidth) != null ? _ref10 : 1;
      this.lineJoin = (_ref11 = args.lineJoin) != null ? _ref11 : "miter";
      this.miterLimit = (_ref12 = args.miterLimit) != null ? _ref12 : 10;
      this.events = [];
      this.receivedEvents = {};
      this.matrix = new Matrix;
      this.toDeleteEvents = [];
      this.boxwidth = 0;
      this.animations = [];
      this.collisionEvents = [];
      this.lastTime = new Date();
      this.thisTime = new Date();
      this.time = 1;
      this.xVelocity = (_ref13 = args.xVelocity) != null ? _ref13 : 0;
      this.yVelocity = (_ref14 = args.yVelocity) != null ? _ref14 : 0;
      this.adjustedX = this.x;
      this.adjustedY = this.y;
      this.delta = {
        x: this.adjustedX,
        y: this.adjustedY,
        hScale: this.hScale,
        vScale: this.vScale,
        hSkew: this.hSkew,
        vSkew: this.vSkew,
        rotation: 0
      };
      this.collideTime = 0;
    }

    Sprite.prototype.setTime = function() {
      this.thisTime = new Date();
      this.time = this.thisTime.getTime() - this.lastTime.getTime();
      return this.lastTime = this.thisTime;
    };

    Sprite.prototype.colorTween = function(tween) {
      var newColor, red;
      if (this.fill.length === 15) red = this.fill.substr(5, 1);
      if (this.fill.length === 16) red = this.fill.substr(5, 2);
      if (this.fill.length === 17) red = this.fill.substr(5, 3);
      newColor = parseInt(red) + 1;
      return this.changeProperty({
        fill: 'rgba(' + newColor.toString() + ',0,255,1)'
      });
    };

    Sprite.prototype.tween = function(tween) {
      var attribute, change;
      change = tween.ease(this.time);
      if (change === "delete") {
        return this.toDeleteEvents.push(tween);
      } else {
        switch (tween.attribute) {
          case "x":
            return this.x = change;
          case "y":
            return this.y = change;
          case "rotation":
            return this.rotation = change;
          case "alpha":
            return this.alpha = change;
          default:
            return attribute = this.x;
        }
      }
    };

    Sprite.prototype.translate = function(vx, vy) {
      var adjVector, vector;
      vector = Vector.add(this.x, this.y, vx, vy);
      this.x = vector.x;
      this.y = vector.y;
      adjVector = Vector.add(this.adjustedX, this.adjustedY, vx, vy);
      this.adjustedX = adjVector.x;
      return this.adjustedY = adjVector.y;
    };

    Sprite.prototype.move = function(vx, vy) {
      this.x = this.x + vx * this.time;
      this.y = this.y + vy * this.time;
      this.adjustedX = this.adjustedX + vx * this.time;
      return this.adjustedY = this.adjustedY + vy * this.time;
    };

    Sprite.prototype.moveTo = function(x, y) {
      var deltaX, deltaY;
      deltaX = this.x - x;
      deltaY = this.y - y;
      this.x = x;
      this.adjustedX = x;
      this.y = y;
      return this.adjustedY = y;
    };

    Sprite.prototype.oldScale = function(x, y) {
      this.matrix.xScale = this.matrix.xScale + x * (2 / 4);
      return this.matrix.yScale = this.matrix.yScale + y * (3 / 4);
    };

    Sprite.prototype.scale = function(x, y) {
      var max, sprite, _i, _len, _ref, _results;
      if (this.radius) {
        if (x !== y) {
          max = Math.max(x, y);
          this.radius = this.radius * max;
          this.width = this.width * max;
          this.height = this.height * max;
          this.matrix.xScale = this.matrix.xScale * (x / max);
          this.matrix.yScale = this.matrix.yScale * (y / max);
        } else {
          this.radius = this.radius * x;
          this.width = this.width * x;
          this.height = this.height * x;
        }
      } else {
        this.width = this.width * x;
        this.height = this.height * y;
      }
      this.centerPoint = {
        x: -this.width / 2 - this.lineWidth / 2,
        y: -this.height / 2 - this.lineWidth / 2
      };
      this.buildDrawingCanvas();
      this.createStamp(this.stampContext);
      _ref = this.subSprites;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sprite = _ref[_i];
        sprite.x = sprite.x * x;
        sprite.y = sprite.y * y;
        sprite.adjustedX = sprite.adjustedX * x;
        sprite.adjustedY = sprite.adjustedY * y;
        _results.push(sprite.scale(x, y));
      }
      return _results;
    };

    Sprite.prototype.rotate = function(rotation) {
      var sprite, _i, _len, _ref, _results;
      this.rotation = this.rotation + rotation;
      _ref = this.subSprites;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sprite = _ref[_i];
        _results.push(sprite.rotate(rotation));
      }
      return _results;
    };

    Sprite.prototype.skew = function(x, y) {
      var sprite, _i, _len, _ref, _results;
      this.matrix.xSkew = this.matrix.xSkew + x;
      this.matrix.ySkew = this.matrix.ySkew + y;
      _ref = this.subSprites;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sprite = _ref[_i];
        _results.push(sprite.skew(x, y));
      }
      return _results;
    };

    Sprite.prototype.draw = function(context) {};

    Sprite.prototype.runDrawing = function(context) {
      this.setupCanvas(context);
      this.draw(context);
      this.drawSubSprites(context);
      return this.restoreCanvas(context);
    };

    Sprite.prototype.runDrawing2 = function(context) {
      this.setupCanvas2(context);
      this.draw(context);
      this.drawSubSprites(context);
      return this.restoreCanvas(context);
    };

    Sprite.prototype.update = function() {
      var sprite, _i, _len, _ref, _results;
      this.delta.x = this.adjustedX;
      this.delta.y = this.adjustedY;
      this.delta.rotation = this.rotation;
      this.setTime();
      this.x = this.x + this.xVelocity * this.time;
      this.y = this.y + this.yVelocity * this.time;
      this.adjustedX = this.adjustedX + this.xVelocity * this.time;
      this.adjustedY = this.adjustedY + this.yVelocity * this.time;
      this.rotation = this.rotation + this.angularVelocity * this.time;
      if (this.rotation > 6.28) this.rotation = 0.1;
      this.runEvents();
      _ref = this.subSprites;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sprite = _ref[_i];
        if (sprite) {
          _results.push(sprite.update());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Sprite.prototype.addChild = function(sprite) {
      return this.subSprites.push(sprite);
    };

    Sprite.prototype.deleteAnimation = function(event) {
      var index;
      index = this.animations.indexOf(event);
      return this.animations.splice(event, 1);
    };

    Sprite.prototype.deleteEvent = function(event) {
      var index;
      index = this.events.indexOf(event);
      return this.events.splice(event, 1);
    };

    Sprite.prototype.run = function(event) {
      if (typeof event === "function") {
        return event();
      } else {
        if (event instanceof Tween) this.tween(event);
        if (event instanceof ColorTween) return this.colorTween(event);
      }
    };

    Sprite.prototype.runEvents = function() {
      var animation, event, _i, _j, _k, _len, _len2, _len3, _ref, _ref2, _ref3;
      _ref = this.animations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        animation = _ref[_i];
        this.run(animation);
      }
      _ref2 = this.events;
      for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
        event = _ref2[_j];
        if (this.receivedEvents[event.code] === true) this.run(event.toDo);
        if (__indexOf.call(this.collisionEvents, event) >= 0) this.run(event.toDo);
      }
      this.collisionEvents.length = 0;
      if (this.toDeleteEvents.length > 0) {
        _ref3 = this.toDeleteEvents;
        for (_k = 0, _len3 = _ref3.length; _k < _len3; _k++) {
          event = _ref3[_k];
          this.deleteAnimation(event);
        }
        return this.toDeleteEvents.length = 0;
      }
    };

    Sprite.prototype.receiveCollisionEvent = function(objectHit) {
      var myEvent, _i, _len, _ref, _results;
      _ref = this.events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        myEvent = _ref[_i];
        if (myEvent.objectType === "boundary") {
          if (objectHit === "boundary") {
            _results.push(this.collisionEvents.push(myEvent));
          } else {
            _results.push(void 0);
          }
        } else if (myEvent.type === collisions) {
          if (myEvent.objectType === "all") {
            _results.push(this.collisionEvents.push(myEvent));
          } else if (objectHit instanceof myEvent.objectType) {
            _results.push(this.collisionEvents.push(myEvent));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Sprite.prototype.receiveEvent = function(e) {
      var myEvent, _i, _len, _ref, _results;
      _ref = this.events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        myEvent = _ref[_i];
        if (myEvent.code === e.keyCode) {
          if (myEvent.action === e.type) {
            _results.push(this.receivedEvents[e.keyCode] = true);
          } else {
            _results.push(delete this.receivedEvents[e.keyCode]);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Sprite.prototype.addAnimation = function(toDo) {
      return this.animations.push(toDo);
    };

    Sprite.prototype.addEvent = function(args) {
      var newEvent, objectType, toDo, type, _ref;
      if (args == null) args = {};
      type = args.type;
      toDo = args.toDo;
      type.observe(this);
      if (type instanceof CollisionManager) {
        objectType = (_ref = args.objectType) != null ? _ref : 'all';
        type.addTypeToTest(this, objectType);
        newEvent = {
          type: type,
          objectType: objectType,
          toDo: toDo
        };
        this.events.push(newEvent);
      }
      if (type instanceof KeyManager) {
        newEvent = {
          type: args.type,
          action: args.action,
          code: args.code,
          toDo: args.toDo
        };
        return this.events.push(newEvent);
      }
    };

    Sprite.prototype.setupCanvas2 = function(context) {
      context.save();
      this.matrix.makeTransformationMatrix();
      context.translate(this.adjustedX, this.adjustedY);
      context.rotate(this.rotation);
      return context.globalAlpha = context.globalAlpha * this.alpha;
    };

    Sprite.prototype.setupCanvas = function(context) {
      context.save();
      this.matrix.makeTransformationMatrix();
      context.translate(this.x, this.y);
      context.rotate(this.rotation);
      context.transform(this.matrix.a, this.matrix.b, this.matrix.c, this.matrix.d, this.matrix.e, this.matrix.f);
      return context.globalAlpha = context.globalAlpha * this.alpha;
    };

    Sprite.prototype.drawSubSprites = function(context) {
      var sprite, _i, _len, _ref, _results;
      _ref = this.subSprites;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sprite = _ref[_i];
        _results.push(sprite.runDrawing(context));
      }
      return _results;
    };

    Sprite.prototype.restoreCanvas = function(context) {
      context.restore();
      return context.globalAlpha = 1.0;
    };

    Sprite.prototype.buildDrawingCanvas = function() {
      this.canvas2 = document.createElement('canvas');
      this.canvas2.width = this.width + this.lineWidth;
      this.canvas2.height = this.height + this.lineWidth;
      this.stampContext = this.canvas2.getContext('2d');
      return this.createStamp(this.stampContext);
    };

    Sprite.prototype.changeProperty = function(args) {
      var key, value;
      if (args == null) args = {};
      for (key in args) {
        if (!__hasProp.call(args, key)) continue;
        value = args[key];
        this[key] = value;
      }
      return this.createStamp(this.stampContext);
    };

    return Sprite;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Sprite = Sprite;

}).call(this);
